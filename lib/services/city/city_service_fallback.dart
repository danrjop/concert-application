import '../../models/city.dart';
import '../../constants/cities.dart';

// A fallback implementation of city service that uses the client-side list
class CityServiceFallback {
  // Generate fake IDs for cities (for compatibility)
  String _generateFakeId(String cityName) {
    // Simple hash function to create consistent IDs
    return cityName.hashCode.toString();
  }
  
  // Convert string city name to City object
  City _stringToCity(String cityName) {
    // Parse out country and state/province if they're included
    List<String> parts = cityName.split(', ');
    
    String name = parts[0];
    String? state;
    String? province;
    String country = 'United States'; // Default
    
    if (parts.length > 1) {
      // If we have "City, State" format
      if (parts.length == 2) {
        state = parts[1];
      } 
      // If we have "City, State/Province, Country" format
      else if (parts.length == 3) {
        final middlePart = parts[1];
        country = parts[2];
        
        // Determine if middle part is state or province based on country
        if (country == 'Canada') {
          province = middlePart;
        } else {
          state = middlePart;
        }
      }
    }
    
    return City(
      id: _generateFakeId(cityName),
      name: name,
      state: state,
      province: province,
      country: country,
    );
  }
  
  // Search cities
  Future<List<City>> searchCities(String query) async {
    if (query.isEmpty) {
      return [];
    }
    
    final stringResults = Cities.search(query);
    return stringResults.map((city) => _stringToCity(city)).toList();
  }
  
  // Get city by ID (will only work for IDs generated by this service)
  Future<City?> getCityById(String id) async {
    // Try to find the city in the list
    for (var cityName in Cities.popularCities) {
      if (_generateFakeId(cityName) == id) {
        return _stringToCity(cityName);
      }
    }
    return null;
  }
  
  // Get popular cities
  Future<List<City>> getPopularCities() async {
    // Return the first 20 cities from the list
    return Cities.popularCities
        .take(20)
        .map((city) => _stringToCity(city))
        .toList();
  }
}
